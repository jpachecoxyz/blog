[{"content":"\fToggle record screen script. This script record the screen with the wf-recorder tool, it can be the hole screen or a specific area of it. The script is going to store the video in /tmp/screencast.mp4, this script only store one video, personally I think that have more than one record is a mess, more if you only wants to share a quick screencast to telegram, irc, cinny or even to share it through 0x0.st.\nDescription and main variables: # Created By: Javier Pacheco - javier@jpacheco.xyz # Created On: 29/03/24 # Project: Screen recorder in wayland # Dependencies: wf-recorder wl-copy and a launcher like dmenu, fuzzel, etc. SOUND_CARD=$(pactl list sources | awk \u0026#39;/Name/ \u0026amp;\u0026amp; /.monitor/ {print $2}\u0026#39;) Recording functions: Those functions have enable the sound recording, so if you have some music, video, etc running it will record the sound but not the mic.\nscreencast: This option is going to record a specific area of the screen. This area is going to be specified by slurp.\nscreencast() { wf-recorder --audio=$SOUND_CARD -f /tmp/screencast.mp4 } area: This option is going to record a specific area of the screen. This area is going to be specified by slurp.\narea() { wf-recorder --audio=$SOUND_CARD -g \u0026#34;$(slurp)\u0026#34; -f /tmp/screencast.mp4 } Useful functions: These functions are tools that ensures this script works correctly. For example if all ready have a existing file recorded, it will removed to record a new one, because this script only will create one video always, and also have a function to kill the process when it finished.\ncheck internet connection: check_connection() { ping -c 1 google.com 1\u0026gt; /dev/null 2\u0026gt;\u0026amp;1 } share: This option is going to upload the video to 0x0.st and copy the url to the clipboard using wc-copy.\nshare() { notify-send \u0026#34;uploading..\u0026#34; \u0026#34;video is upoading to 0x0.st\u0026#34; curl -F \u0026#34;file=@/tmp/screencast.mp4\u0026#34; https://0x0.st | wl-copy \u0026amp;\u0026amp; notify-send \u0026#34;Video stored in 0x0.st\u0026#34; } Kill existing process: kill_proc(){ pkill --signal SIGINT wf-recorder if [ $? -eq 0 ]; then notify-send \u0026#34;Video stored\u0026#34; \u0026#34;Video was stored in /tmp/screencast.mp4\u0026#34; pkill --signal SIGINT wf-recorder exit 0 fi } Remove existing video: remove_vid() { [ -f /tmp/screencast.mp4 ] \u0026amp;\u0026amp; rm /tmp/screencast.mp4 } Sequence: This is were the scripts actually starts, first of all look if the script is already running, if not then ask for a recording option:\nkill_proc OPT=$(printf \u0026#34;screencast\\narea\\nshare\\nquit\u0026#34; | fuzzel --dmenu -p \u0026#39;Select an option: \u0026#39; ) case $OPT in \u0026#39;screencast\u0026#39;) sleep 1 remove_vid sleep 1 screencast;; \u0026#39;area\u0026#39;) sleep 1 remove_vid sleep 1 area;; \u0026#39;share\u0026#39;) check_connection \u0026amp;\u0026amp; share || notify-send \u0026#34;Error\u0026#34; \u0026#34;check your internet connection\u0026#34; ;; *|quit) exit 0;; esac ","permalink":"http://localhost:1313/posts/screncast/","summary":"Toggle record screen script. This script record the screen with the wf-recorder tool, it can be the hole screen or a specific area of it. The script is going to store the video in /tmp/screencast.mp4, this script only store one video, personally I think that have more than one record is a mess, more if you only wants to share a quick screencast to telegram, irc, cinny or even to share it through 0x0.","title":"Toggle screencast record."},{"content":"\rGreetings! I\u0026rsquo;m Javier Pacheco, a dedicated Industrial Maintenance Engineer with a rich academic foundation from the prestigious UTM in H. Matamoros Tamaulipas,Mexico. Over the span of 12 fruitful years, I\u0026rsquo;ve been an integral part of the automotive industry, contributing my expertise in a multitude of critical domains.\nMy journey began with a profound fascination for the intricate mechanisms that power manufacturing and industrial processes. At UTM, I honed my skills, diving deep into the realms of engineering, automation, and problem-solving. This foundation paved the way for my foray into the dynamic world of industrial maintenance.\nWithin the automotive landscape, I\u0026rsquo;ve carved my niche in handling Programmable Logic Controllers (PLCs), robotics, and programming, orchestrating seamless operations and bolstering efficiency. My prowess extends beyond conventional boundaries—I harness the power of CAD software to craft intricate designs that harmonize innovation with practicality.\nProgramming is not just a skill set; it\u0026rsquo;s an intrinsic part of my identity. The allure of languages such as Python, C, and Lisp captivates me, compelling me to unravel their complexities and harness their capabilities to engineer groundbreaking solutions.\nMy career is a testament to my unwavering commitment to innovation and continuous learning. Each challenge fuels my passion, propelling me to explore new horizons and revolutionize conventional practices. I thrive in environments that demand ingenuity and embrace the convergence of technology and creativity.\nBeyond the technical facets, I am deeply invested in collaborative endeavors, fostering a culture of knowledge exchange and mentorship. I firmly believe that sharing insights and empowering others amplifies the impact of technological advancements.\n/See my whole informationn here.\nWhere to Find Me GitHub. LinkedIn. Projects that I\u0026rsquo;m currently develop. Void linux installation script. Noobemacs, a minimal emacs configuration with evil mode. pymetrics, a python gui app to manage maintenance logs. ","permalink":"http://localhost:1313/about/","summary":"Greetings! I\u0026rsquo;m Javier Pacheco, a dedicated Industrial Maintenance Engineer with a rich academic foundation from the prestigious UTM in H. Matamoros Tamaulipas,Mexico. Over the span of 12 fruitful years, I\u0026rsquo;ve been an integral part of the automotive industry, contributing my expertise in a multitude of critical domains.\nMy journey began with a profound fascination for the intricate mechanisms that power manufacturing and industrial processes. At UTM, I honed my skills, diving deep into the realms of engineering, automation, and problem-solving.","title":"About Me"},{"content":"\fIntroducción. Esta es una explicación de como generar un repositorio con sistema de versiones (git), para almacenar y controlar la configuración de nuestro entorno en NixOS.\nConfiguraciones iniciales. Comencemos con la preparación para poder empezar el repositorio de manera limpia y sin advertencias de ningún tipo.\nConfigurando el entorno de git. Antes de empezar a generar el repositorio, debemos de declarar nuestro usuario y correo en git, para saber quien esta haciendo los cambios, puede sonar tonto, ya que estamos manejando nuestros propios dotfiles, pero para efectos de trabajo y colaboraciones, estas cosas son necesarias.\ngit config --global user.name \u0026#34;John Doe\u0026#34; # Definimos nuestro nombre. git config --global user.email johndoe@example.com # Definimos el correo. git config --global init.defaultBranch main\t# Definimos el nombre del repo por defecto a \u0026#34;main\u0026#34; Otra manera de hacerlo es declarándolo desde home-manager.\nprograms.git = { enable = true; userName = \u0026#34;John Doe\u0026#34;; userEmail = \u0026#34;johndoe@example.com\u0026#34;; extraConfig = { init.DefaultBranch = \u0026#34;main\u0026#34;; }; }; Estas configuraciones nos ayudaran para poder iniciar un repositorio sin tener problemas. Entonces ahora con esto listo, podemos empezar a crear el repositorio en donde queramos manejar nuestra configuración. Una vez estando en la ruta de la carpeta en donde estará el repositorio de git, escribimos en terminal el siguiente comando:\nA escribir comandos. Ya teniendo listo la configuración tenemos que crear un repositorio, para esto debemos tener configurado github con ssh, y saber como crear un repositorio desde el portal de github.\ngit init En este momento podrías agregar tus archivos de configuración como:\n/etc/nixos/configuration.nix /etc/nixos/hardware-confguration.nix home.nix flake.nix y hacer el commit correspondiente.\nConfigurando ssh. Para tener un poco mas de seguridad es buena practica tener configurado ssh para no tener que estar escribiendo el usuario y la password;\nCrear el repositorio en github. Ir a tu cuenta de github y crear un nuevo repositorio. Una vez creado el repositorio, en terminal escribiremos el siguiente comando:\ngit remote add github git@github.com/\u0026lt;tuusuario\u0026gt;/\u0026lt;nombredelrepostorio\u0026gt;.git git push github main ","permalink":"http://localhost:1313/posts/my_nix_configuration/","summary":"Introducción. Esta es una explicación de como generar un repositorio con sistema de versiones (git), para almacenar y controlar la configuración de nuestro entorno en NixOS.\nConfiguraciones iniciales. Comencemos con la preparación para poder empezar el repositorio de manera limpia y sin advertencias de ningún tipo.\nConfigurando el entorno de git. Antes de empezar a generar el repositorio, debemos de declarar nuestro usuario y correo en git, para saber quien esta haciendo los cambios, puede sonar tonto, ya que estamos manejando nuestros propios dotfiles, pero para efectos de trabajo y colaboraciones, estas cosas son necesarias.","title":"Git y el manejo de configuración"},{"content":"\fCode This is the main code of the application.\nimport sys from PyQt5.QtWidgets import ( QApplication, QWidget, QLabel, QComboBox, QVBoxLayout, QLineEdit, QTextEdit, QPushButton, QDateEdit, QGridLayout) from PyQt5.QtCore import QDate import csv import os from variables import * class MaintenanceForm(QWidget): def __init__(self): super().__init__() self.setWindowTitle(\u0026#34;Summit Planta Leon - Maintenance Form\u0026#34;) self.setGeometry(100, 100, 400, 400) layout = QGridLayout() # Machine type combo box self.machine_type_label = QLabel(\u0026#34;Select Machine Type:\u0026#34;) self.machine_type_combo = QComboBox() self.machine_type_combo.addItems([str(equipment) for equipment in EQUIPMENT]) self.machine_type_combo.currentIndexChanged.connect(self.update_machine_id_combo) layout.addWidget(self.machine_type_label, 0, 0) layout.addWidget(self.machine_type_combo, 0, 1) # Machine ID combo box self.machine_id_label = QLabel(\u0026#34;Select Machine ID:\u0026#34;) self.machine_id_combo = QComboBox() self.update_machine_id_combo() layout.addWidget(self.machine_id_label, 1, 0) layout.addWidget(self.machine_id_combo, 1, 1) # Technician combo box self.technician_label = QLabel(\u0026#34;Select Technician:\u0026#34;) self.technician_combo = QComboBox() self.technician_combo.addItems([str(tec) for tec in TECS]) layout.addWidget(self.technician_label, 2, 0) layout.addWidget(self.technician_combo, 2, 1) # Date field self.date_label = QLabel(\u0026#34;Date:\u0026#34;) self.date_edit = QDateEdit() self.date_edit.setCalendarPopup(True) self.date_edit.setDate(QDate.currentDate()) layout.addWidget(self.date_label, 3, 0) layout.addWidget(self.date_edit, 3, 1) # Work order number self.work_order_label = QLabel(\u0026#34;Work Order Number:\u0026#34;) self.work_order_edit = QLineEdit() layout.addWidget(self.work_order_label, 4, 0) layout.addWidget(self.work_order_edit, 4, 1) # Technician notes self.notes_label = QLabel(\u0026#34;Technician Notes:\u0026#34;) self.notes_edit = QTextEdit() layout.addWidget(self.notes_label, 5, 0) layout.addWidget(self.notes_edit, 5, 1) # Time spent field self.time_spent_label = QLabel(\u0026#34;Time Spent (minutes):\u0026#34;) self.time_spent_edit = QLineEdit() layout.addWidget(self.time_spent_label, 6, 0) layout.addWidget(self.time_spent_edit, 6, 1) # Downtime field self.downtime_label = QLabel(\u0026#34;Downtime (minutes):\u0026#34;) self.downtime_edit = QLineEdit() layout.addWidget(self.downtime_label, 7, 0) layout.addWidget(self.downtime_edit, 7, 1) # Buttons self.submit_button = QPushButton(\u0026#34;Submit\u0026#34;) self.submit_button.clicked.connect(self.submit) layout.addWidget(self.submit_button, 8, 0) self.clear_button = QPushButton(\u0026#34;Clear\u0026#34;) self.clear_button.clicked.connect(self.clear_fields) layout.addWidget(self.clear_button, 8, 1) self.close_button = QPushButton(\u0026#34;Close\u0026#34;) self.close_button.clicked.connect(self.close_application) layout.addWidget(self.close_button, 9, 0, 1, 2) self.setLayout(layout) def update_machine_id_combo(self): machine_type = self.machine_type_combo.currentText() self.machine_id_combo.clear() if machine_type == \u0026#34;IMM\u0026#34;: self.machine_id_combo.addItems([str(imm + 100) for imm in range(1, moldeo + 1)]) elif machine_type == \u0026#34;ROBOT\u0026#34;: self.machine_id_combo.addItems([str(robot + 200) for robot in range(1, moldeo + 1)]) elif machine_type == \u0026#34;THERMO\u0026#34;: self.machine_id_combo.addItems([str(thermo + 300) for thermo in range(1, moldeo + 1)]) elif machine_type == \u0026#34;MAGUIRE\u0026#34;: self.machine_id_combo.addItems([str(maguire + 400) for maguire in range(1, moldeo + 1)]) elif machine_type == \u0026#34;SOFT-TRIM\u0026#34;: self.machine_id_combo.addItems([str(softtrim + 500) for softtrim in range(1, softrim + 1)]) elif machine_type == \u0026#34;BOOTH\u0026#34;: self.machine_id_combo.addItems([str(booth + 600) for booth in range(1, booth + 1)]) elif machine_type == \u0026#34;VINIL\u0026#34;: self.machine_id_combo.addItems([str(vinil + 700) for vinil in range(1, vinil + 1)]) elif machine_type == \u0026#34;T1XX\u0026#34;: self.machine_id_combo.addItems([str(t1xx + 800) for t1xx in range(1, t1xx + 1)]) elif machine_type == \u0026#34;CX483\u0026#34;: self.machine_id_combo.addItems([str(fixture + 900) for fixture in range(1, cx483 + 1)]) elif machine_type == \u0026#34;U725\u0026#34;: self.machine_id_combo.addItems([str(fixture + 1000) for fixture in range(1, u725 + 1)]) elif machine_type == \u0026#34;KXX/KM\u0026#34;: self.machine_id_combo.addItems([str(fixture + 1100) for fixture in range(1, kxx + 1)]) elif machine_type == \u0026#34;BT1CG/PERFCAR/P708\u0026#34;: self.machine_id_combo.addItems([str(fixture + 1200) for fixture in range(1, bt1cg + 1)]) elif machine_type == \u0026#34;GAP HIDDER\u0026#34;: self.machine_id_combo.addItems([str(fixture + 1300) for fixture in range(1, gap_hidder + 1)]) elif machine_type == \u0026#34;OTROS\u0026#34;: self.machine_id_combo.addItems([str(fixture + 1400) for fixture in range(1, otros + 1)]) def submit(self): machine_type = self.machine_type_combo.currentText() machine_id = self.machine_id_combo.currentText() technician = self.technician_combo.currentText() date = self.date_edit.date().toString(\u0026#34;yyyy-MM-dd\u0026#34;) work_order = self.work_order_edit.text() notes = self.notes_edit.toPlainText() time_spent = self.time_spent_edit.text() downtime = self.downtime_edit.text() data = [machine_type, machine_id, technician, date, work_order, notes, time_spent, downtime] file_path = \u0026#34;maintenance_log.csv\u0026#34; file_exists = os.path.exists(file_path) with open(file_path, mode=\u0026#39;a\u0026#39;, newline=\u0026#39;\u0026#39;) as file: writer = csv.writer(file) if os.stat(file_path).st_size == 0: writer.writerow([\u0026#34;Machine Type\u0026#34;, \u0026#34;Machine ID\u0026#34;, \u0026#34;Technician\u0026#34;, \u0026#34;Date\u0026#34;, \u0026#34;Work Order Number\u0026#34;, \u0026#34;Technician Notes\u0026#34;, \u0026#34;Time Spent (minutes)\u0026#34;, \u0026#34;Downtime (minutes)\u0026#34;]) writer.writerow(data) self.clear_fields() def clear_fields(self): self.work_order_edit.clear() self.notes_edit.clear() self.time_spent_edit.clear() self.downtime_edit.clear() self.machine_type_combo.setCurrentIndex(0) self.technician_combo.setCurrentIndex(0) self.date_edit.setDate(QDate.currentDate()) self.update_machine_id_combo() def close_application(self): self.close() if __name__ == \u0026#34;__main__\u0026#34;: app = QApplication(sys.argv) form = MaintenanceForm() form.show() sys.exit(app.exec_()) More test. for i in range(10): print(i) ","permalink":"http://localhost:1313/posts/pymetrics/","summary":"Code This is the main code of the application.\nimport sys from PyQt5.QtWidgets import ( QApplication, QWidget, QLabel, QComboBox, QVBoxLayout, QLineEdit, QTextEdit, QPushButton, QDateEdit, QGridLayout) from PyQt5.QtCore import QDate import csv import os from variables import * class MaintenanceForm(QWidget): def __init__(self): super().__init__() self.setWindowTitle(\u0026#34;Summit Planta Leon - Maintenance Form\u0026#34;) self.setGeometry(100, 100, 400, 400) layout = QGridLayout() # Machine type combo box self.machine_type_label = QLabel(\u0026#34;Select Machine Type:\u0026#34;) self.machine_type_combo = QComboBox() self.machine_type_combo.addItems([str(equipment) for equipment in EQUIPMENT]) self.","title":"Pymetrics"},{"content":"\fThis is the first post of the 2024, this is a project that I am working on in the last year, is a minimialist voidlinux instalator it is based in some recomendations in a guides that some friends of my have but \u0026ldquo;semiautomated\u0026rdquo;.\nVoidStrap installer. A basic minimalist installer of void-linux with some packages to get ready to enjoy this amazing GNU/Linux distribution.\nUsage: Running install.sh Download the iso, and once in root inside the live, git clone this repo: (You need to update inside the iso and install git)\nNOTE: there are 3 branches:\nmain This will install void-musl. glibc This will install void-glibc. dual This will install void-glibc dual boot with Windows. This branch is tested only with Windows, I never try it with other distributions. If you want musl you can change the link to the mirror in the install.sh script: - Change this in line 11: export XBPS_ARCH=x86_64 \u0026amp;\u0026amp; xbps-install -Suy -R http://mirrors.servercentral.com/voidlinux/current -r /mnt \\ - For this: export XBPS_ARCH=x86_64-musl \u0026amp;\u0026amp; xbps-install -Suy -R http://mirrors.servercentral.com/voidlinux/current/musl -r /mnt \\ git clone https://git.disroot.org/jpacheco/voidstrap cd voidstrap sh install.sh Once there the script will open cfdisk, and you need to format the HDD in this specific format:\n- /dev/sdX1 -\u0026gt; as the boot partition. - /dev/sdY2 -\u0026gt; as the swap partition. - /dev/sdZ3 -\u0026gt; as the root partition. NOTE: Replace X,Y \u0026amp; Z for your partition name. I consider to have this structure of partition, but you can change it, but you must change the code in postinstall.sh when the scripts make the fstab archive.\nMake sure you do a backup of your files before doing crazy things and trust anyone script\nWhen the install.sh script finish, you need to run the postinstall script located in /root folder:\nRunning postinstall.sh This script its going to create some configuration files, like: fstab, rc.conf, change the password of root, and add user(s).\nxchroot /mnt Then run the chroot.sh script.\nsh /root/postinstall.sh When the postinsall.sh script finishes, you only need to reboot and enjoy your Void-Linux distribution.\nWhen it finish you need to run the postinstall.sh script, that is going to install the X server and some other \u0026ldquo;necessary\u0026rdquo; packages.\nThe custom.sh script This is going to install my personal dotfiles, and a specific packages that I use:\nsh /root/custom.sh But you can specify your dotfiles repositories and others that you require whit some parameters:\nsh custom.sh -r https://codeberg.org/jpacheco/dotfiles # specify a repo url.\rsh custom.sh -p otherprogfile.csv # especify a custom package archive to install.\rsh custom.sh -b dev # especify the name of a custom branch in case of needed. References: Voidstrap. Voidlinux Documentation. Tuxliban guides. ","permalink":"http://localhost:1313/posts/voidstrap-a-tui-void-linux-installator/","summary":"This is the first post of the 2024, this is a project that I am working on in the last year, is a minimialist voidlinux instalator it is based in some recomendations in a guides that some friends of my have but \u0026ldquo;semiautomated\u0026rdquo;.\nVoidStrap installer. A basic minimalist installer of void-linux with some packages to get ready to enjoy this amazing GNU/Linux distribution.\nUsage: Running install.sh Download the iso, and once in root inside the live, git clone this repo: (You need to update inside the iso and install git)","title":"Voidstrap a tui void linux installator"}]