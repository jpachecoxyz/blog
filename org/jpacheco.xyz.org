#+TITLE: jpacheco.xyz
#+AUTHOR: Javier Pacheco
#+DESCRIPTION: My website posts & projects.
#+hugo_base_dir: ~/webdev/blog/
#+startup: content
#+hugo_custom_front_matter: toc true
#+hugo_auto_set_lastmod: t
#+date: 2024-07-04
#+seq_todo: TODO(t) WAIT(w@/!) | DONE(d!)


* DONE About me.                                                      :about:
CLOSED: [2024-01-05 Fri 18:00]
:PROPERTIES:
:EXPORT_FILE_NAME: content/about.md
:EXPORT_DESCRIPTION: My personal information
:EXPORT_HUGO_SECTION: 
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image "images/thumbnails/jp.png"
:END:

#+ATTR_HTML: :width 200px :style float:left;margin:0px 10px 10px 0px;
[[file:/images/jp.jpg]]

Greetings! I'm Javier Pacheco, a dedicated Industrial Maintenance Engineer with a rich academic foundation from the prestigious *UTM* in *H. Matamoros Tamaulipas,Mexico*. Over the span of 12 fruitful years, I've been an integral part of the automotive industry, contributing my expertise in a multitude of critical domains.

My journey began with a profound fascination for the intricate mechanisms that power manufacturing and industrial processes. At UTM, I honed my skills, diving deep into the realms of engineering, automation, and problem-solving. This foundation paved the way for my foray into the dynamic world of industrial maintenance.

Within the automotive landscape, I've carved my niche in handling Programmable Logic Controllers (PLCs), robotics, and programming, orchestrating seamless operations and bolstering efficiency. My prowess extends beyond conventional boundaries—I harness the power of CAD software to craft intricate designs that harmonize innovation with practicality.

Programming is not just a skill set; it's an intrinsic part of my identity. The allure of languages such as Python, C, and Lisp captivates me, compelling me to unravel their complexities and harness their capabilities to engineer groundbreaking solutions.

My career is a testament to my unwavering commitment to innovation and continuous learning. Each challenge fuels my passion, propelling me to explore new horizons and revolutionize conventional practices. I thrive in environments that demand ingenuity and embrace the convergence of technology and creativity.

Beyond the technical facets, I am deeply invested in collaborative endeavors, fostering a culture of knowledge exchange and mentorship. I firmly believe that sharing insights and empowering others amplifies the impact of technological advancements.

#+ATTR_HTML: :target _blank
See my whole information [[file:/documents/cv.pdf][here]].

** Where to Find Me
- [[https://github.com/jpachecoxyz][GitHub.]]
- [[https://www.linkedin.com/in/jpachecom4/][LinkedIn.]]

** Projects that I'm currently develop.
- [[https://github.com/engjpacheco/voidstrap][Void linux installation script.]]
- [[https://github.com/engjpacheco/noobemacs][Noobemacs, a minimal emacs configuration with evil mode.]]
- [[https://github.com/engjpacheco/pymetrics][pymetrics, a python gui app to manage maintenance logs.]]
  

* DONE Screen Record                          :shell:script:hyprland:wayland:
CLOSED: [2024-03-15 Fri 04:14]
:PROPERTIES:
:EXPORT_FILE_NAME: screen-record
:EXPORT_DESCRIPTION: Script to record in hyprland
:EXPORT_HUGO_SECTION: posts
:END:

This script record the screen with the =wf-recorder= tool, it can be the hole screen or a specific area of it.
The script is going to store the video in =/tmp/screencast.mp4=, this script only store one video, personally I think that have more than one record is a mess, more if you only wants to share a quick screencast to /telegram, irc, cinny/ or even to share it through =0x0.st=.

** Description and main variables:
#+begin_src shell
# Created By: Javier Pacheco - javier@jpacheco.xyz
# Created On: 29/03/24
# Project: Screen recorder in wayland
# Dependencies: wf-recorder wl-copy and a launcher like dmenu, fuzzel, etc.

SOUND_CARD=$(pactl list sources | awk '/Name/ && /.monitor/ {print $2}')
#+end_src

** Recording functions:
Those functions have enable the sound recording, so if you have some music, video, etc running it will record the sound but not the mic.

*** screencast:
This option is going to record a specific area of the screen.
This area is going to be specified by =slurp=.
#+begin_src shell
screencast() {
   wf-recorder --audio=$SOUND_CARD -f /tmp/screencast.mp4
}
#+end_src

*** area:
This option is going to record a specific area of the screen.
This area is going to be specified by =slurp=.
#+begin_src shell
area() {
   wf-recorder --audio=$SOUND_CARD -g "$(slurp)" -f /tmp/screencast.mp4
}
#+end_src

** Useful functions:
These functions are tools that ensures this script works correctly. For example if all ready have a existing file recorded, it will removed to record a new one, because this script only will create one video always, and also have a function to kill the process when it finished. 

*** check internet connection:
#+begin_src shell
check_connection() {
    ping -c 1 google.com 1> /dev/null 2>&1
}
#+end_src

*** share:
This option is going to upload the video to =0x0.st= and copy the url to the clipboard using =wc-copy=.
#+begin_src shell
share() {
   notify-send "uploading.." "video is upoading to 0x0.st"
   curl -F "file=@/tmp/screencast.mp4" https://0x0.st | wl-copy && notify-send "Video stored in 0x0.st"
}
#+end_src

*** Kill existing process:
#+begin_src shell
kill_proc(){
    pkill --signal SIGINT wf-recorder
    if [ $? -eq 0 ];
    then
        notify-send "Video stored" "Video was stored in /tmp/screencast.mp4"
        pkill --signal SIGINT wf-recorder
        exit 0
    fi
}
#+end_src

*** Remove existing video:
#+begin_src shell
remove_vid() {
    [ -f /tmp/screencast.mp4 ] && rm /tmp/screencast.mp4
}
#+end_src

** Sequence:
This is were the scripts actually starts, first of all look if the script is already running, if not then ask for a recording option: 
#+begin_src shell
kill_proc

OPT=$(printf "screencast\narea\nshare\nquit" | fuzzel --dmenu -p 'Select an option: ' )
case $OPT in
    'screencast')
        sleep 1
        remove_vid
        sleep 1
        screencast;;
    'area')
        sleep 1
        remove_vid
        sleep 1
        area;;
    'share') 
        check_connection && share || notify-send "Error" "check your internet connection" ;;
    *|quit) exit 0;;
esac
#+end_src


* DONE Efetch.el                                                :emacs:fetch:
CLOSED: [2024-01-13 Sat 04:11]
:PROPERTIES:
:EXPORT_FILE_NAME: efetch
:EXPORT_DESCRIPTION: A emacs fetching tool.
:CREATED:     2023-07-05
:EXPORT_HUGO_SECTION: posts
:END:

#+BEGIN_PREVIEW
Embrace a new level of Emacs mastery with =efetch.el= – a powerful and user-friendly Emacs Fetching Tool. Designed for enthusiasts who crave insights into their Emacs environment, =efetch.el= provides a seamless way to peek under the hood of your setup. With just a simple command, unlock a left-side buffer showcasing key details such as Emacs version, host information, user details, installed packages, active theme, and default font. Customizable and accessible, this tool not only delivers a quick snapshot of your Emacs configuration but also opens the door for collaborative enhancements. Join the community on [[https://github.com/jpachecoxyz/efetch.el][Github]] contribute your ideas, and elevate your Emacs experience with =efetch.el= today!
#+END_PREVIEW

#+begin_center
#+CAPTION: efetch.el tool in the left side of the frame.
[[/images/content/efetch.png]]
#+end_center

** Overview
Are you an Emacs enthusiast who loves to keep track of your environment details? Look no further! We are excited to introduce =efetch.el= - the Emacs Fetching Tool. This nifty extension provides a quick and informative snapshot of your Emacs setup, helping you stay in the know about your environment configuration.

** Features
- **Quick Access**: Invoke =efetch= with a simple command to access a left-side buffer displaying essential information about your Emacs environment.

- **Information at a Glance**: Get a concise overview, including Emacs version, host details, user information, installed packages, active theme, and default font.

- **Customization**: Tailor the appearance and information displayed in the =efetch= buffer to suit your preferences.

- **Convenient Keyboard Shortcut**: Close the =efetch= buffer and its window effortlessly with the =q= key.

** How to Use
1. **Installation**: Add the following line to your Emacs configuration:

 #+BEGIN_SRC emacs-lisp
(require 'efetch)
 #+END_SRC

Ensure the =efetch.el= file is in a directory included in your =load-path=.

2. **Usage**: Invoke =efetch= interactively using:

#+begin_example
M-x efetch
#+end_example

The information will be displayed in a left-side buffer named *efetch-popup*.

** Customization
Feel free to customize the appearance or the information displayed in the =efetch= buffer by modifying the relevant sections in the =efetch= function.

** Contribution
We welcome contributions and feedback! =efetch.el= is hosted on [[https://github.com/engjpacheco/efetch.el][github]]. Feel free to [[https://github.com/engjpacheco/efetch.el/fork][fork the repository]] and submit pull requests. 
The project is open to changes, improvements, and collaborations.

** Get Started

Enhance your Emacs experience with =efetch.el=! Stay informed about your environment effortlessly. Download and integrate it into your Emacs setup today.


* DONE Void linux bootstrap.                           :void:installer:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: voidstrap
:EXPORT_DESCRIPTION: A void linux semi-automated installer.
:DATE:     07-05-2024
:EXPORT_HUGO_SECTION: projects
:END:

#+BEGIN_PREVIEW
This is the first post of the 2024, this is a project that I am working on in the last
year, is a minimialist voidlinux instalator it is based in some recomendations in 
a guides that some friends of my have but "semiautomated".
#+END_PREVIEW

** VoidStrap installer.
A basic minimalist installer of =void-linux= with some packages to get ready to enjoy
this amazing GNU/Linux distribution.

** Usage:

*** Running install.sh

Download the iso, and once in root inside the live, git clone this repo:
(You need to update inside the iso and install =git=)

NOTE: there are 3 =branches:=
- main :: This will install =void-musl=.
- glibc :: This will install =void-glibc=.
- dual :: This will install =void-glibc= dual boot with =Windows=.
  - *This branch is tested only with =Windows=, I never try it with other distributions.*
  - If you want musl you can change the link to the mirror in the =install.sh= script:
#+begin_example
- Change this in line 11:
export XBPS_ARCH=x86_64 && xbps-install -Suy -R http://mirrors.servercentral.com/voidlinux/current -r /mnt \
- For this:
export XBPS_ARCH=x86_64-musl && xbps-install -Suy -R http://mirrors.servercentral.com/voidlinux/current/musl -r /mnt \
#+end_example
    
#+begin_src shell
git clone https://git.disroot.org/jpacheco/voidstrap
cd voidstrap
sh install.sh
#+end_src

Once there the script will open =cfdisk=, and you need to format the HDD in this 
specific format:
#+begin_example
- /dev/sdX1 -> as the boot partition.
- /dev/sdY2 -> as the swap partition.
- /dev/sdZ3 -> as the root partition.
#+end_example

NOTE: Replace X,Y & Z for your partition name.
I consider to have this structure of partition, but you can change it, but you must
change the code in =postinstall.sh= when the scripts make the =fstab= archive.

*Make sure you do a backup of your files before doing crazy things and trust anyone script*

When the =install.sh= script finish, you need to run the postinstall script located in =/root folder:=

*** Running postinstall.sh

This script its going to create some configuration files, like: =fstab=, =rc.conf=,
change the password of =root=, and add user(s).

#+begin_src shell
xchroot /mnt
#+end_src

Then run the =chroot.sh= script.
#+begin_src shell
sh /root/postinstall.sh
#+end_src

When the =postinsall.sh= script finishes, you only need to reboot and enjoy your
*Void-Linux* distribution.

When it finish you need to run the =postinstall.sh= script, that is going to install
the *X server* and some other "necessary" packages.

** The custom.sh script

This is going to install my personal dotfiles, and a specific packages that I use:
#+begin_src shell
sh /root/custom.sh
#+end_src

But you can specify your dotfiles repositories and others that you require whit some parameters:

#+begin_src 
sh custom.sh -r https://codeberg.org/jpacheco/dotfiles # specify a repo url.
sh custom.sh -p otherprogfile.csv # especify a custom package archive to install.
sh custom.sh -b dev # especify the name of a custom branch in case of needed.
#+end_src

** References:
- [[https://codeberg.org/jpacheco/voidstrap][Voidstrap.]]
- [[https://docs.voidlinux.org/][Voidlinux Documentation.]] 
- [[https://git.disroot.org/tuxliban/tutoriales_void/src/branch/master/Gu%C3%ADas][Tuxliban guides.]]

  


* DONE Shell-utils                                      :shell:linux:scripts:
:PROPERTIES:
:EXPORT_FILE_NAME: shell-utils.org
:EXPORT_DESCRIPTION: A github repo that stores shell scripts utilities for x and wayland.
:DATE:     07-28-2024
:EXPORT_HUGO_SECTION: projects
:END:

** Overview
Welcome to the Shell Utilities [[https://github.com/jpachecoxyz/shell-utils][repository]] This project provides a collection of shell scripts tailored for different window managers and environments, including i3, Hyprland, and Sway, on X11 and Wayland.

** Repository Structure
The repository is organized into directories based on the environment and window manager:

#+begin_src shell
.
├── wayland
│   ├── hyprland
│   └── sway
└── x11
    └── i3
#+end_src

- wayland/hyprland :: Scripts for Hyprland on Wayland.
- wayland/sway :: Scripts for Sway on Wayland.
- x11/i3 :: Scripts for i3 on X11.

** Installation
To install the scripts, use the provided =install.sh= script. You can install scripts for a specific window manager or all at once. 

NOTE: The =install.sh= scripts use =$HOME/.local/bin= as the target, you can edit this variable inside the script, or copy the files manually somewhere as you have your path.

#+BEGIN_SRC shell
# Install scripts for a specific window manager
./install.sh sway
./install.sh hyprland
./install.sh i3

# Install all scripts
./install.sh all
#+END_SRC

** Usage
Each script includes usage instructions in the comments at the top. You can run a script directly from the terminal or integrate it into your workflow.

** Contributing
We welcome contributions! If you'd like to contribute, please follow these steps:

1. Fork the repository.
2. Create a new branch for your feature or fix.
3. Make your changes and commit them with descriptive messages.
4. Push your changes to your fork.
5. Submit a pull request to the main repository.

** Contact
For questions or suggestions, please open an issue on GitHub or contact [[mailto:javier@jpacheco.xyz][Javier pacheco]].


* DONE Share Screen in Hyprland.                     :hyprland:linux:wayland:
CLOSED: [2024-08-11 Sun 02:52]
:PROPERTIES:
:EXPORT_FILE_NAME: share-screen-hyprland.org
:EXPORT_DESCRIPTION: How to share screen in hyprland in apps like: telegram-desktop.
:DATE:     07-28-2024
:EXPORT_HUGO_SECTION: posts
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-08-11 Sun 02:52]
:END:

** The issue:
We have a telegram group, in where we share emacs things and some other related to programming and linux in the most part of the time. So one day one of the members says that we can share screens and have a kind of podcast and talk about our environment configurations (sway/hyprland), so I was very curious about it so he invite me to another telegram group, this telegram group is for his YouTube channel, for test my hyprland configuration because he told me that he has troubles in his hyprland configuration using manjaro.

Now that I face the error, I realize that in my =home-manager= compilation I had this error since I was using this tool in =nixOS=, but because I never use it, I never let it importance, so now I realize that this thing need to be solved because I going to use it in the future.

So I installed =telegram-dektop=, and try to share my configuration and guess what; yes I was unable to share my screen. It failed and pop ups some errors.

** Things that I try before to solve the problem.
My main distribution at the time (2024-07-28) is =nixOS=, so I think that this could be a missing declaration in some programs, like =xdg-dektop-portal-hyprland=, because of that I was researching issues in =nixOS= & =hyprland=, but nothing solve the problem.

So nothing that I found fix the problem, most of the issues in github was too old, or nothing to do with =nixOS=, so the last thing that I could do was compile =xdg-desktop-portal-hyprland= by source, but in =nixOS= I would install some compilers and other things that I not currently use, but it was the last option.

** Solving the problem.
So once in my job, with the mind more clean, I go to the hyprland [[https://wiki.hyprland.org/Useful-Utilities/xdg-desktop-portal-hyprland/][wiki]], and at the bottom there were some tips to debugging if some errors appears.

So I add this in my =Hyprland= configuration file:

#+begin_src conf
exec-once = dbus-update-activation-environment --systemd --all
#+end_src

That's it, that little command above solve my 1 day pain trying to share my screen. So I hope this little post be helpful for you if you encounter the same issue as me.

Thanks for read me.


* DONE Pymetrics                                         :python:maintenance:
CLOSED: [2024-08-11 Sun 03:00]
:PROPERTIES:
:EXPORT_FILE_NAME: pymetrics.md
:EXPORT_DESCRIPTION: A GUI app written in python to store maintenace logs.
:DATE:     08-11-2024
:EXPORT_HUGO_SECTION: projects
:EXPORT_HUGO_WEIGHT: 1
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-08-11 Sun 03:00]
:END:

** Overview
Managing and monitoring the performance of industrial machines is critical to ensuring minimal downtime and maximizing productivity. The need for an effective system to store and analyze maintenance data became apparent when the maintenance manager contacted me with a specific problem. They struggled to create KPI graphs because they lacked a proper system to store all the necessary data. To address this challenge, I developed a maintenance log app that efficiently tracks and records machine failures, repair time, shutdown time, and the technicians involved in the repairs. The data is stored in a CSV format, making it easy to create KPI (Key Performance Indicator) graphs in Excel for analysis.

** Features
- Machine Failure Logging :: Record each instance of machine failure with timestamps.
- Repair Time Tracking :: Log the start and end times of repairs to calculate the total repair duration.
- Shutdown Time Monitoring :: Track the total time a machine is down due to failures and repairs.
- Technician Assignment :: Assign technicians to specific repair tasks and log their involvement.

** How the Project Started
The project began when the maintenance manager reached out to me with a significant issue: they were unable to create KPI graphs due to the lack of a system for storing maintenance data. Understanding the importance of this data for monitoring machine performance, I developed the maintenance log app in Python to solve the problem. By providing a structured way to capture and store all relevant data, the app enables easy analysis and KPI generation.

** Benefits
The maintenance log app provides several key benefits:
- *Enhanced Data Management:* All data is stored in a standardized CSV format, which can be easily imported into Excel for further analysis.
- *Improved KPI Tracking: By analyzing the recorded data, maintenance teams can generate KPI graphs in Excel to monitor performance metrics such as Mean Time to Repair (MTTR) and Mean Time Between Failures (MTBF).
- Informed Decision-Making:* The insights gained from the KPI graphs help in making informed decisions to improve machine reliability and reduce downtime.

** Technical Details
The app is built using Python, leveraging its robust data handling capabilities. The CSV format is chosen for its simplicity and compatibility with various data analysis tools.

** Usage
The application is designed to be user-friendly, requiring minimal input from the maintenance team. The data entry process is streamlined, allowing technicians to quickly log failures and repairs without interrupting their workflow.

** How to Get Started
You can access the source code and instructions for setting up the maintenance log app on GitHub: [[https://github.com/jpachecoxyz/pymetrics][Pymetrics Repository]].

** Conclusion
This maintenance log app is a practical tool for any industrial maintenance team looking to improve their machine monitoring and maintenance processes. By providing a clear view of machine performance through KPI graphs, it helps teams identify trends and make data-driven decisions. The app was born out of a real-world need, and I'm excited to see how it can help others in similar situations.

Feel free to explore the project and contribute to its development by visiting the [[https://github.com/jpachecoxyz/pymetrics][Pymetrics Repository]] on GitHub.


* DONE Emacs vs Neovim                      :emacs:nvim:programming:writting:
CLOSED: [2024-08-13 Tue 05:06]
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-vs-nvim
:EXPORT_DESCRIPTION: My opinion about emacs and neovim about writting and programming.
:DATE:     08-13-2024
:EXPORT_HUGO_SECTION: posts
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image "images/thumbnails/emacs.png"
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-08-13 Tue 05:06]
:END:

** Neovim for Programming
- Efficiency and Speed: Neovim is highly efficient for programming due to its lightweight nature and focus on speed. It starts up faster and can handle large files with ease.
- Plugin Ecosystem: Neovim has a rich plugin ecosystem, especially for programming-related tasks. Plugins like nvim-treesitter for syntax highlighting, telescope.nvim for fuzzy finding, and coc.nvim or nvim-lspconfig for Language Server Protocol (LSP) support make it a powerful choice for coding.
- Modal Editing: Neovim, like Vim, uses modal editing, which can be very powerful for code navigation and manipulation once you get used to it.

** Emacs for Writing Posts (and Beyond)
- Org-mode: Emacs shines when it comes to writing and organizing content, especially with Org-mode. Org-mode is exceptional for note-taking, task management, and writing posts or documentation. It allows you to export your work to various formats (HTML, PDF, LaTeX, etc.) easily.
- Extensibility: Emacs is known for its extensibility. You can customize it to be a full-fledged IDE, text editor, or writing tool. For blog posts, especially if you're using something like ox-hugo, Emacs can be incredibly powerful.
- Unified Environment: If you prefer an environment where you can write, code, manage tasks, and do everything in one place, Emacs offers that. It's an all-in-one tool where you can manage your entire workflow.

** Which Should You Choose?
- For Programming: Neovim might be better if you want a focused, fast, and highly efficient tool purely for coding. It's especially suitable if you prefer modal editing and a streamlined environment.

- For Writing and More: Emacs could be better if you're looking for a versatile tool that excels at writing posts, organizing content, and managing your entire workflow beyond just coding. It's particularly strong if you take advantage of Org-mode's features.

Since I already use Emacs for my blog with Hugo, I find it more productive to keep using it for writing and content management while possibly using Neovim for coding tasks if you prefer its efficiency and speed.


* DONE How I made my blog with emacs and hugo               :emacs:blog:hugo:
CLOSED: [2024-08-14 Wed 20:41]
:PROPERTIES:
:EXPORT_FILE_NAME: my-blog-in-emacs
:EXPORT_DESCRIPTION: A overview of how I write and develop my web blog using emacs & hugo
:DATE:     08-14-2024
:EXPORT_HUGO_SECTION: posts
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-08-14 Wed 20:41]
:END:

#+BEGIN_PREVIEW
I have been using emacs most of the time for writting, and of course when I started to make my blog I have been use it (emacs) since of it. In the beginig when I start writing I was using some scripts and tips from [[https://systemcrafters.net/][system crafters]] he use htmlize and some /lisp/ scripting. It was ok but then I have been watching some [[https://www.youtube.com/@LukeSmithxyz][lukesmith]] videos and see this [[https://www.youtube.com/watch?v=jAXKSKb3etk&pp=ygUOaHVnbyBsdWtlc21pdGg%3D][video]] about him switching to =HUGO=, so I decided to check =HUGO= too.
#+END_PREVIEW

#+begin_center
#+CAPTION: A overview of how my org file looks like.
[[/posts/images/my-blog-in-emacs/overview.png]]
#+end_center

** What software and packages do I use?.
Yep! I use =emacs= 🤓 and =ox-hugo=.

And to build the static web I use [[https://gohugo.io/getting-started/quick-start/][HUGO]] and =git=.
#+CAPTION: This is what I have in my emacs configuration.
#+begin_src elisp
(use-package ox-hugo
  :ensure t
  :after ox)
#+end_src


** Org and its configuration.
=HUGO= uses markdown to manage the sites, posts, etc. but because we where using emacs, (we don't like others than org syntax), so there are a lot of variables that =ox-hugo= handle in order to been exported to markdown syntax.

In my case I like to develop my whole blog into a single org-file

#+CAPTION: My metadata in my org-file.
#+begin_src elisp
#+begin_src org
#+TITLE: jpacheco.xyz
#+AUTHOR: Javier Pacheco
#+DESCRIPTION: My website posts & projects.
#+hugo_base_dir: ~/webdev/blog/
#+startup: content
#+hugo_custom_front_matter: toc true
#+hugo_auto_set_lastmod: t
#+date: 2024-07-04
#+seq_todo: TODO(t) WAIT(w@/!) | DONE(d!)
#+end_src
---

These are the most important and relevant to use within HUGO:

- /#+HUGO_BASE_DIR:/
This declare where you HUGO site is located, basically in the path where you run =hugo new site my-site=.
- /#+HUGO_CUSTOM_FRONT_MATTER/:
This is for enable/disable the toc of the posts when ox-hugo exported to md format.

** Writing the posts.
Write a post is very easy to start, you only need to add a org lvl-1 header, and add a more metadata (properties). The sub-headers of the post are going to be org-lvl-3 headers, and so on.

#+begin_src org
 ** TODO How I made my blog with emacs and hugo               :emacs:blog:hugo:
    :PROPERTIES:
    :EXPORT_FILE_NAME: my-blog-in-emacs
    :EXPORT_DESCRIPTION: A overview of how I write and develop my web blog using emacs & hugo
    :DATE:     08-14-2024
    :EXPORT_HUGO_SECTION: posts
    :END:
#+end_src

- /:EXPORT_FILE_NAME/:
This is how your file is going to be stored, you may or not add the =.md= extension.
- /:EXPORT_HUGO_SECTION/:
Here is the tricky part, if you have multiple sections like: post, projects, topics, etc. this is where the file is going to be stored.

If the sub-header starts with a TODO, when exported the md metadata is going to have =draftt: true=, which means even the archive is going to be created when you run hugo to create your site that md archive is going to be ignored until you finish (remove the TODO or change it to DONE.).

And tha's it, you can search more options for manage the front matter in hugo in this [[https://ox-hugo.scripter.co/][page.]]

Thanks for reading.
