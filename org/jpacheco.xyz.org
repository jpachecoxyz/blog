#+TITLE: jpacheco.xyz
#+AUTHOR: Javier Pacheco
#+DESCRIPTION: My website posts & projects.
#+hugo_base_dir: ~/webdev/blog
#+startup: content
#+hugo_auto_set_lastmod: t
#+date: 2024-07-04


* About me                                                               :me:
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_DESCRIPTION: My personal information
:EXPORT_HUGO_SECTION: about
:DRAFT: true
:END:

Greetings! I'm Javier Pacheco, a dedicated Industrial Maintenance Engineer with a rich academic foundation from the prestigious *UTM* in *H. Matamoros Tamaulipas,Mexico*. Over the span of 12 fruitful years, I've been an integral part of the automotive industry, contributing my expertise in a multitude of critical domains.

My journey began with a profound fascination for the intricate mechanisms that power manufacturing and industrial processes. At UTM, I honed my skills, diving deep into the realms of engineering, automation, and problem-solving. This foundation paved the way for my foray into the dynamic world of industrial maintenance.

Within the automotive landscape, I've carved my niche in handling Programmable Logic Controllers (PLCs), robotics, and programming, orchestrating seamless operations and bolstering efficiency. My prowess extends beyond conventional boundariesâ€”I harness the power of CAD software to craft intricate designs that harmonize innovation with practicality.

Programming is not just a skill set; it's an intrinsic part of my identity. The allure of languages such as Python, C, and Lisp captivates me, compelling me to unravel their complexities and harness their capabilities to engineer groundbreaking solutions.

My career is a testament to my unwavering commitment to innovation and continuous learning. Each challenge fuels my passion, propelling me to explore new horizons and revolutionize conventional practices. I thrive in environments that demand ingenuity and embrace the convergence of technology and creativity.

Beyond the technical facets, I am deeply invested in collaborative endeavors, fostering a culture of knowledge exchange and mentorship. I firmly believe that sharing insights and empowering others amplifies the impact of technological advancements.

#+ATTR_HTML: :target _blank
See my whole information [[file:/documents/cv.pdf][here]].

** Where to Find Me
- [[https://github.com/engjpacheco][GitHub.]]
- [[https://www.linkedin.com/in/jpachecom4/][LinkedIn.]]

** Projects that I'm currently develop.
- [[https://github.com/engjpacheco/voidstrap][Void linux installation script.]]
- [[https://github.com/engjpacheco/noobemacs][Noobemacs, a minimal emacs configuration with evil mode.]]
- [[https://github.com/engjpacheco/pymetrics][pymetrics, a python gui app to manage maintenance logs.]]
  

* TODO Screen Record                          :shell:script:hyprland:wayland:
:PROPERTIES:
:EXPORT_FILE_NAME: screen-record
:EXPORT_DESCRIPTION: Script to record in hyprland
:EXPORT_HUGO_SECTION: posts
:HUGO_DRAFT: true
:END:
This script record the screen with the =wf-recorder= tool, it can be the hole screen or a specific area of it.
The script is going to store the video in =/tmp/screencast.mp4=, this script only store one video, personally I think that have more than one record is a mess, more if you only wants to share a quick screencast to /telegram, irc, cinny/ or even to share it through =0x0.st=.

** Description and main variables:
#+begin_src shell
# Created By: Javier Pacheco - javier@jpacheco.xyz
# Created On: 29/03/24
# Project: Screen recorder in wayland
# Dependencies: wf-recorder wl-copy and a launcher like dmenu, fuzzel, etc.

SOUND_CARD=$(pactl list sources | awk '/Name/ && /.monitor/ {print $2}')
#+end_src

** Recording functions:
Those functions have enable the sound recording, so if you have some music, video, etc running it will record the sound but not the mic.

*** screencast:
This option is going to record a specific area of the screen.
This area is going to be specified by =slurp=.
#+begin_src shell
screencast() {
   wf-recorder --audio=$SOUND_CARD -f /tmp/screencast.mp4
}
#+end_src

*** area:
This option is going to record a specific area of the screen.
This area is going to be specified by =slurp=.
#+begin_src shell
area() {
   wf-recorder --audio=$SOUND_CARD -g "$(slurp)" -f /tmp/screencast.mp4
}
#+end_src

** Useful functions:
These functions are tools that ensures this script works correctly. For example if all ready have a existing file recorded, it will removed to record a new one, because this script only will create one video always, and also have a function to kill the process when it finished. 

*** check internet connection:
#+begin_src shell
check_connection() {
    ping -c 1 google.com 1> /dev/null 2>&1
}
#+end_src

*** share:
This option is going to upload the video to =0x0.st= and copy the url to the clipboard using =wc-copy=.
#+begin_src shell
share() {
   notify-send "uploading.." "video is upoading to 0x0.st"
   curl -F "file=@/tmp/screencast.mp4" https://0x0.st | wl-copy && notify-send "Video stored in 0x0.st"
}
#+end_src

*** Kill existing process:
#+begin_src shell
kill_proc(){
    pkill --signal SIGINT wf-recorder
    if [ $? -eq 0 ];
    then
        notify-send "Video stored" "Video was stored in /tmp/screencast.mp4"
        pkill --signal SIGINT wf-recorder
        exit 0
    fi
}
#+end_src

*** Remove existing video:
#+begin_src shell
remove_vid() {
    [ -f /tmp/screencast.mp4 ] && rm /tmp/screencast.mp4
}
#+end_src

** Sequence:
This is were the scripts actually starts, first of all look if the script is already running, if not then ask for a recording option: 
#+begin_src shell
kill_proc

OPT=$(printf "screencast\narea\nshare\nquit" | fuzzel --dmenu -p 'Select an option: ' )
case $OPT in
    'screencast')
        sleep 1
        remove_vid
        sleep 1
        screencast;;
    'area')
        sleep 1
        remove_vid
        sleep 1
        area;;
    'share') 
        check_connection && share || notify-send "Error" "check your internet connection" ;;
    *|quit) exit 0;;
esac
#+end_src

